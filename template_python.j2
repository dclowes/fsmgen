{%- set SM = statemachine|upper -%}
{%- set sm = statemachine|lower -%}
# Generated by program
# pylint: disable=invalid-name
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-locals
# pylint: disable=too-many-branches
# pylint: disable=too-many-statements
# pylint: disable=too-many-return-statements
# pylint: disable=missing-docstring
# pylint: disable=global-statement
# pylint: disable=unused-argument
def StateSwitch_{{sm}}(context, state, event):
    next_state = state
    next_event = None
{%- for state in states|sort %}
    if state == "{{state}}":
  {%- for event in events|sort %}
  {%- if transactions[state][event] is defined %}
        if event == "{{event}}":
    {%- for action in transactions[state][event]['actions'] %}
    {%- if transactions[state][event]['type'] == 'classifier' %}
            next_event = {{action}}(context, state, event)
    {%- else %}
            {{action}}(context, state, event)
    {%- endif %}
    {%- endfor %}
    {%- if transactions[state][event]['type'] == 'transition' %}
    {%- if transactions[state][event]['targets'] is defined %}
            next_state = "{{transactions[state][event]['targets']|first}}"
    {%- endif %}
    {%- endif %}
            return (next_state, next_event, 1)
    {%- endif %}
  {%- endfor %}
        return (next_state, next_event, 0)
{%- endfor %}
    return (next_state, next_event, 0)

def RunStateSwitch_{{sm}}(context, state, event):
    next_state = state
    next_event = event
    rule_count = 0
    while next_event is not None:
        state_event = StateSwitch_{{sm}}(context, state, next_event)
        next_event = state_event[1]
        rule_count = rule_count + state_event[2]
    next_state = state_event[0]
    if next_state != state:
        state_event = StateSwitch_{{sm}}(context, state, "Exit")
        state_event = StateSwitch_{{sm}}(context, next_state, "Entry")
    return (next_state, next_event, rule_count)

if __name__ == "__main__":
{%- for action in actions|sort %}
    def {{action}}(context, state, event):
        print "State %-14s event %-14s: {{action}}" % (state, event)
{%- endfor %}
