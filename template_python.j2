{%- set SM = statemachine|upper -%}
{%- set sm = statemachine|lower -%}
{%- set BEGIN_CODE = '{' + '{' + '{' -%}
{%- set END_CODE = '}' + '}' + '}' -%}
#!/usr/bin/env python2
# Generated by program
# pylint: disable=invalid-name
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-locals
# pylint: disable=too-many-branches
# pylint: disable=too-many-statements
# pylint: disable=too-many-return-statements
# pylint: disable=missing-docstring
# pylint: disable=global-statement
# pylint: disable=unused-argument

#
# ACTIONS
{%- for act in actions %}
#   {{act}}: {{actions[act]}}
{%-endfor%}
#
# TRANSACTIONS
{%- for txn in transactions %}
#   {{txn}}:
{%- for evt in transactions[txn] %}
#     {{evt}}: {{transactions[txn][evt]}}
{%-endfor%}
{%-endfor%}
#
# CODE BLOCKS
{%- for item in code_blocks %}
#   {{item}}: {{code_blocks[item]}}
{%- endfor %}

# BEGIN CUSTOM: custom imports {{BEGIN_CODE}}
{%- if 'custom imports' in code_blocks %}
{%- for line in code_blocks['custom imports'] %}
{{line}}
{%- endfor %}
{%- endif %}
# END CUSTOM: custom imports {{END_CODE}}
from collections import deque

class {{SM}}_FSM:
#
    # States
{%- for state in states|sort(case_sensitive=True) %}
    {{state}} = {{loop.index}}
{%- endfor %}

    States = {
{%- for state in states|sort(case_sensitive=True) %}
        '{{state}}': {{state}}{% if not loop.last %},{% endif %}
{%- endfor %}
    }

    # Events
{%- for event in events|sort(case_sensitive=True) %}
    {{event}} = {{loop.index}}
{%- endfor %}

    Events = {
{%- for event in events|sort(case_sensitive=True) %}
        '{{event}}': {{event}}{% if not loop.last %},{% endif %}
{%- endfor %}
    }

#
# Constructor
#
    def __init__(self, initialState):
        ''' Initialize the state machine '''
        self.queue = deque()
        self.BusyFlag = False
        self.logger = None
        self.target = None
        self.this_state = initialState

#
# RunStateEvent
#
def StateSwitch_{{sm}}(context, state, event):
    next_state = state
    next_event = None
{%- for state in states|sort %}
    if state == "{{state}}":
  {%- for event in events|sort %}
  {%- if transactions[state][event] is defined %}
        if event == "{{event}}":
    {%- for act in transactions[state][event]['actions'] %}
    {%- if transactions[state][event]['type'] == 'classifier' %}
            next_event = {{act}}(context, state, event)
    {%- else %}
            {{act}}(context, state, event)
    {%- endif %}
    {%- endfor %}
    {%- if transactions[state][event]['type'] == 'transition' %}
    {%- if transactions[state][event]['states'] is defined %}
            next_state = "{{transactions[state][event]['states']|first}}"
    {%- endif %}
    {%- endif %}
            return (next_state, next_event, 1)
    {%- endif %}
  {%- endfor %}
        return (next_state, next_event, 0)
{%- endfor %}
    return (next_state, next_event, 0)

#
# ProcessEvent
#
def RunStateSwitch_{{sm}}(context, state, event):
    next_state = state
    next_event = event
    rule_count = 0
    while next_event is not None:
        state_event = StateSwitch_{{sm}}(context, state, next_event)
        next_event = state_event[1]
        rule_count = rule_count + state_event[2]
    next_state = state_event[0]
    if next_state != state:
        state_event = StateSwitch_{{sm}}(context, state, "Exit")
        state_event = StateSwitch_{{sm}}(context, next_state, "Entry")
    return (next_state, next_event, rule_count)

#
# UnitTest
#
if __name__ == "__main__":
{%- for act in actions|sort %}
    def {{act}}(context, state, event):
        print("State %-14s event %-14s: {{act}}" % (state, event))
{%- endfor %}
#
# vim{# This spoils vim #}: ft=python ts=8 sts=4 sw=4 expandtab autoindent smartindent nocindent
 {#- vim: ft=jinja ts=8 sts=4 sw=4 et smartindent nocindent
 #}
#
