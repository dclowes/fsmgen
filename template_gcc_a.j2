{%- set SM = statemachine|upper -%}
/* Generated by program */
#include "{{statemachine|lower}}.fsm.h"
#include <stdlib.h>
/* BEGIN CUSTOM: include files [[[ */
{%- if code_blocks['include files'] is defined %}
{%- for line in code_blocks['include files'] %}
{{line}}
{%- endfor %}
{%- endif %}
/* END CUSTOM: include files ]]] */

/* @brief private data type used in action routines */
typedef {{SM}}_PRIVATE_DATA *pPRIVATE_DATA;

/* Place forward declarations, used in the action code, here */
/* BEGIN CUSTOM: forward declarations [[[ */
{%- if code_blocks['forward declarations'] is defined %}
{%- for line in code_blocks['forward declarations'] %}
{{line}}
{%- endfor %}
{%- endif %}
/* END CUSTOM: forward declarations ]]] */

{%- for act in actions|sort(case_sensitive=True) %}

/**
 * {{SM}} Action {{act.name}}
 * @smi - the state machine instance
 * @state - the current state
 * @event - the current event
 * @pContext - event context
 * @pPrivate - statemachine instance private data
 * @return - classification/exception
 */
static {{SM}}_EVENT {{act}}(
    {{SM}} smi,
    {{SM}}_STATE state,
    {{SM}}_EVENT event,
    void *pContext,
    void *pPrivate)
{
    {{SM}}_EVENT result = NULL;
    pPRIVATE_DATA self = (pPRIVATE_DATA) pPrivate;
    /* BEGIN CUSTOM: {{act}} action code [[[ */
{%- if act + " action code" in code_blocks %}
{%- for line in code_blocks[act + " action code"] %}
{{line}}
{%- endfor %}
{%- endif %}
    /* END CUSTOM: {{act}} action code ]]] */
    return result;
}
{%- endfor %}

/*
 * Initialize the Class to use these functions
 */
void {{SM}}_ClassInit(void)
{
{%- for act in actions|sort(case_sensitive=True) %}
    {{SM}}_ClassSetAction({{SM}}_ACTION_{{act}}, {{act}});
{%- endfor %}
}

/*
 * Example function to construct the instance
 * Also sets the private data and private destructor (or NULL)
 */
static {{SM}} make(
    char *name,
    {{SM}}_STATE initialState,
    void *pPrivate,
    void (*pKiller)(void *))
{
    {{SM}} smi;
    smi = {{SM}}_InstanceMake(name, initialState);
    {{SM}}_SetPrivate(smi, pPrivate, pKiller);
    return smi;
}

/* Place function definitions, used in the action code, here */
/* BEGIN CUSTOM: control code [[[ */
{%- if code_blocks['control code'] is defined %}
{%- for line in code_blocks['control code'] %}
{{line}}
{%- endfor %}
{%- endif %}
/* END CUSTOM: control code ]]] */

#ifdef UNIT_TEST

/* Place function definitions, used in the test code, here */
/* BEGIN CUSTOM: test code [[[ */
{%- if code_blocks['test code'] is defined %}
{%- for line in code_blocks['test code'] %}
{{line}}
{%- endfor %}
{%- endif %}
/* END CUSTOM: test code ]]] */

int main(int argc, char *argv[])
{
    {{SM}} smi;
    {{SM}}_PRIVATE_DATA private_data;
    {{SM}}_STATE initialState = NULL;

    {{SM}}_ClassInit();
    memset(&private_data, 0, sizeof(private_data));
    smi = make(
        "test", initialState,
        &private_data, NULL);
    {{SM}}_SetReportFunc(smi,
        NULL);

    /* test something */
    /* BEGIN CUSTOM: main code [[[ */
{%- if code_blocks['main code'] is defined %}
{%- for line in code_blocks['main code'] %}
{{line}}
{%- endfor %}
{%- endif %}
    /* END CUSTOM: main code ]]] */

    {{SM}}_InstanceKill(smi);
    return EXIT_SUCCESS;
}

#endif /* UNIT_TEST */
#if 0 /* BEGIN PARKING LOT [[[ */
{%- for code in code_blocks|sort(case_sensitive=True) if ' action code' in code and code.replace(' action code', '') not in actions %}
/* BEGIN CUSTOM: {{code}} [[[ */
{%- for line in code_blocks[code] %}
{{line}}
{%- endfor %}
/* END CUSTOM: {{code}} ]]] */
{%- endfor %}
#endif /* END PARKING LOT ]]] */

/*
 * vim: ft=c ts=8 sts=4 sw=4 et cindent fmr=[[[,]]]
 */
