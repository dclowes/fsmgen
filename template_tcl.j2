{%- set SM = statemachine|upper -%}
{%- set sm = statemachine|lower -%}
# Generated by program
proc StateSwitch_{{sm}} {context state event} {
    set next_state ${state}
    set next_event {}

{%- for state in states|sort(case_sensitive=True) if transactions[state] is defined %}
    if {${state} == "{{state}}"} {

{%- for event in events|sort(case_sensitive=True) if transactions[state][event] is defined %}
        if {${event} == "{{event}}"} {
  {%- for action in transactions[state][event]['actions'] %}
            set next_event [{{action}} ${context} ${state} ${event}]
            if {${next_event} != {}} {
              return [list ${next_state} ${next_event} 1]
            }
  {%- endfor %}
  {%- if transactions[state][event]['states']|count > 0 %}
            set next_state "{{transactions[state][event]['states']|first}}"
  {%- endif %}
            return [list ${next_state} ${next_event} 1]
        }
{%- endfor %}
        return [list ${next_state} ${next_event} 0]
    }
{%- endfor %}
    return [list ${next_state} ${next_event} 0]
}

proc RunStateSwitch_{{sm}} {context state event} {
    set next_state ${state}
    set next_event ${event}
    set rule_count 0
    while { ${next_event} != {} } {
        set state_event [StateSwitch_{{sm}} ${context} ${state} ${next_event}]
        debug_log ${context} 1 "StateSwitch ${context} ${state} ${next_event} => ${state_event}"
        set next_state [lindex ${state_event} 0]
        set next_event [lindex ${state_event} 1]
        set rule_count [expr {${rule_count} + [lindex ${state_event} 2]}]
        if { ${next_event} != {} } {
            continue
        }
        if { ${next_state} != ${state} } {
            set state_event [StateSwitch_{{sm}} ${context} ${state} "Exit"]
            debug_log ${context} 1 "StateSwitch ${context} ${state} Exit => ${state_event}"
            set state_event [StateSwitch_{{sm}} ${context} ${next_state} "Entry"]
            debug_log ${context} 1 "StateSwitch ${context} ${next_state} Entry => ${state_event}"
        }
        set state ${next_state}
    }
    return [list ${next_state} ${next_event} ${rule_count}]
}

