{%- set SM = statemachine|upper -%}
{%- set sm = statemachine|lower -%}
{%- set BEGIN_CODE = '{' + '{' + '{' %}
{%- set END_CODE = '}' + '}' + '}' %}
#!/usr/bin/env python3
# Generated by program
# pylint: disable=invalid-name
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-locals
# pylint: disable=too-many-branches
# pylint: disable=too-many-statements
# pylint: disable=too-many-return-statements
# pylint: disable=missing-docstring
# pylint: disable=global-statement
# pylint: disable=unused-argument

#
# ACTIONS
{%- for act in actions %}
#   {{act}}: {{actions[act]}}
{%-endfor%}
#
# TRANSACTIONS
{%- for txn in transactions %}
#   {{txn}}:
{%- for evt in transactions[txn] %}
#     {{evt}}: {{transactions[txn][evt]}}
{%-endfor%}
{%-endfor%}
#
# CODE
#
{%- for item in Code %}
#   {{item}}: {{Code[item]}}
{%- for t in Code[item].text %}
#     {{t[0]}}: {{t[1]}}
{%-endfor%}
{%-endfor%}
#
# CODE BLOCKS
{%- for item in code_blocks %}
#   {{item}}: {{code_blocks[item]}}
{%- endfor %}

# BEGIN CUSTOM: custom imports {{BEGIN_CODE}}
{%- if 'custom imports' in code_blocks %}
{%- for line in code_blocks['custom imports'] %}
{{line}}
{%- endfor %}
{%- endif %}
# END CUSTOM: custom imports {{END_CODE}}
from collections import deque
import logging, logging.handlers

class {{SM}}_FSM(object):
#
    # States
{%- for state in states|sort(case_sensitive=True) %}
    {{state}} = {{loop.index}}
{%- endfor %}

    States = {
{%- for state in states|sort(case_sensitive=True) %}
        '{{state}}': {{state}}{% if not loop.last %},{% endif %}
{%- endfor %}
    }

    # Events
{%- for event in events|sort(case_sensitive=True) %}
    {{event}} = {{loop.index}}
{%- endfor %}

    Events = {
{%- for event in events|sort(case_sensitive=True) %}
        '{{event}}': {{event}}{% if not loop.last %},{% endif %}
{%- endfor %}
    }

    State_Names = [
        "",
{%- for state in states|sort(case_sensitive=True) %}
        '{{state}}'{% if not loop.last %},{% endif %}
{%- endfor %}
    ]

    Event_Names = [
        "",
{%- for event in events|sort(case_sensitive=True) %}
        '{{event}}'{% if not loop.last %},{% endif %}
{%- endfor %}
    ]

    Action_Names = [
        "",
{%- for action in actions|sort(case_sensitive=True) %}
        '{{action}}'{% if not loop.last %},{% endif %}
{%- endfor %}
    ]

#
# Constructor
#
    def __init__(self, initialState, the_logger=None):
        ''' Initialize the state machine '''
        self.queue = deque()
        self.BusyFlag = False
        self.logger = the_logger
        self.target = None
        self.this_state = initialState

#
# RunStateEvent
#
    def runStateEvent(self, this_event, context):
        '''
        Run this event until there are no more generated
        '''
        next_event = this_event
        while next_event:
            this_event = next_event
            next_event = None
            next_state = self.this_state
{%- for state in transactions|sort(case_sensitive=True) %}
            if self.this_state == self.{{state}}:
{%- for event in transactions[state]|sort(case_sensitive=True) %}
                if this_event == self.{{event}}:
{%- if transactions[state][event].states|count > 0 %}
                    next_state = self.{{ transactions[state][event]['states']|first }}
{% endif %}
{%- if transactions[state][event].actions|count > 0 %}
{%- for act in transactions[state][event]['actions'] %}
                    next_event = self.{{act}}(this_event, context)
                    if next_event:
                        continue
{%- endfor -%}
{%- endif -%}
{%- endfor %}
{%- endfor %}
        return next_state

#
# ProcessEvent
#
    def processEvent(self, this_event, context):
        '''
        Run an event through the statemachine instance
        '''
        if self.BusyFlag:
            self.queue.append((this_event, context))
            return
        self.BusyFlag = True
        while True:
            if self.logger:
                self.logger.debug("Event: {}".format(self.Event_Names[this_event]))
            next_state = self.runStateEvent(this_event, context)
            while next_state != self.this_state:
                self.runStateEvent(self.Exit, context)
                if self.logger:
                    self.logger.debug("State: {} ==> {}".format(
                        self.State_Names[self.this_state],
                        self.State_Names[next_state]))
                self.this_state = next_state
                next_state = self.runStateEvent(this_event, context)
            if not self.queue:
                break
            this_event, context = self.queue.popleft()
        self.BusyFlag = False

{%- for act in actions|sort %}

    # Action {{act}}
    def {{act}}(self, event, eventContext):
{%- if 'comment' in actions[act] %}
        '''
        {% for comment in actions[act]['comment'] %}{{comment}}{%- endfor%}
        '''
{%- endif %}
        result = None
        # BEGIN CUSTOM: {{act}} action code {{BEGIN_CODE}}
{%- if act in Code and Code[act].type == 'action_type' %}
{%- for item in Code[act].text if item[0] == "PYTHON" %}
{%- for line in item[1] %}
{{line}}
{%- endfor %}
{%- endfor %}
{%-else%}
{%- if act + " action code" in code_blocks %}
{%- for line in code_blocks[act + ' action code'] %}
{{line}}
{%- endfor %}
{%- endif %}
{%- endif %}
        # END CUSTOM: {{act}} action code {{END_CODE}}
        return result
{%- endfor %}

#
# UnitTest
#
if __name__ == "__main__":
    class TEST_CLASS({{SM}}_FSM):
        def __init__(self, initialState, logger=None):
            {{SM}}_FSM.__init__(self, initialState, logger)
{%- for act in actions|sort %}
        def {{act}}(self, event, eventContext):
            if self.logger:
                self.logger.debug("Action: {{act}}")
{%- endfor %}
    logger = logging.getLogger("{{SM}}")
    logger.setLevel(logging.DEBUG)
    handler = logging.handlers.RotatingFileHandler("{{sm}}.log", backupCount=1)
    handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        "%(asctime)s:%(name)s:%(levelname)s:%(message)s",
        "%Y-%m-%dT%H:%M:%S")
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    handler.doRollover()
    test = TEST_CLASS(None, logger)
{%- for test in tests %}
{%- for item in test %}
{%- if item in states %}
{%- if loop.first %}
    test.this_state = test.{{item}}
{%- else %}
    assert test.this_state == test.{{item}}
{%- endif %}
{%- else %}
    test.processEvent(test.{{item}}, None)
{%- endif %}
{%- endfor %}
{%- endfor %}
#
# vim{# This spoils vim #}: ft=python ts=8 sts=4 sw=4 expandtab autoindent smartindent nocindent
 {#- vim: ft=jinja ts=8 sts=4 sw=4 et smartindent nocindent
 #}
#
