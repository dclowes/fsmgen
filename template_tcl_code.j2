{%- set SM = statemachine|upper -%}
{%- set sm = statemachine|lower -%}
{%- set BEGIN_CODE = '{' + '{' + '{' -%}
{%- set END_CODE = '}' + '}' + '}' -%}
# Generated by template
#
# This file contains the action routines for the
# "{{SM}}" state machine.
#
# Coding between the "{{BEGIN_CODE}}" and "{{END_CODE}}" lines
# will be preserved.
#
{%- for action in actions|sort(case_sensitive=True) %}
#------------------------------------------------------------------------------
# {{action}}
{%- for line in actions[action].comment %}
#     {{line}}
{%- endfor %}
#
{%- for state in transactions|sort(case_sensitive=True) %}
{%- for event in transactions[state]|sort(case_sensitive=True) if action in transactions[state][event]['actions'] %}
# {{state}}.{{event}}:
{%- for next_event in transactions[state][event]['events']|sort(case_sensitive=True) %}
#     '{{next_event}}'
{%- endfor %}
#
{%- endfor %}
{%- endfor %}
proc {{action}} {context state event} {
  set catch_status [ catch {
{%- if 'SCT' in outputs %}
    debug_log ${context} 1 "Action: {{action}} dev=${context}, state=${state}, event=${event}, sct=[sct]"
{%- endif %}
    set myResult {}
    # BEGIN CUSTOM: {{action}} action code {{BEGIN_CODE}}
{%- for code in code_blocks %}
{%- if action + " action code" == code %}
{%- for line in code_blocks[code] %}
{{line}}
{%- endfor %}
{%- endif %}
{%- endfor %}
    # END CUSTOM: {{action}} action code {{END_CODE}}
    return myResult
  } catch_message ]
  set tc_root ${context}
  handle_exception ${catch_status} ${catch_message}
}
{% endfor %}

# vim{# vim: set ft=jinja ts=8 sw=4 sts=4 et :#}: ft=tcl ts=8 sw=4 sts=4 et
