/**
{%- set SM = statemachine|upper %}
{%- set sm = statemachine|lower %}
 * Generated by program - do not edit
 *
 * Declarations for use by callers
 */
#ifndef {{SM}}_FSM_H
#define {{SM}}_FSM_H

/* States */
typedef const struct {{SM}}_STATE_t *{{SM}}_STATE;
{%- for state in states|sort(case_sensitive=True) %}
extern const {{SM}}_STATE {{SM}}_STATE_{{state}};
{%- endfor %}

/* Events */
typedef const struct {{SM}}_EVENT_t *{{SM}}_EVENT;
{%- for event in events|sort(case_sensitive=True) %}
extern const {{SM}}_EVENT {{SM}}_EVENT_{{event}};
{%- endfor %}

/* Actions */
typedef const struct {{SM}}_ACTION_t *{{SM}}_ACTION;
{%- for action in actions|sort(case_sensitive=True) %}
extern const {{SM}}_ACTION {{SM}}_ACTION_{{action}};
{%- endfor %}

/* Statemachine Instance */
typedef struct {{SM}}_t *{{SM}};

/* Statemachine Functions */

/* User Supplied Action Functions */
typedef {{SM}}_EVENT (*{{SM}}_Action)(
    {{SM}} smi,
    {{SM}}_STATE state,
    {{SM}}_EVENT event,
    void *pContext,
    void *pPrivate);

/* Statemachine Instance Constructor */
{{SM}} {{SM}}_InstanceMake(const char *name, {{SM}}_STATE initial);

/* Statemachine Instance ForceState */
void {{SM}}_ForceState({{SM}} smi, {{SM}}_STATE initial);

/* Statemachine Instance Destructor */
void {{SM}}_InstanceKill({{SM}} smi);

/* Statemachine Instance Driver */
void {{SM}}_ProcessEvent({{SM}} smi, {{SM}}_EVENT ev, void *pContext);

/* Statemachine Class Action Setter */
void {{SM}}_ClassSetAction(
    {{SM}}_ACTION action,
    {{SM}}_Action af);

/* Statemachine Instance Action Setter */
void {{SM}}_InstanceSetAction({{SM}} smi,
    {{SM}}_ACTION action,
    {{SM}}_Action af);

/* Statemachine Class Action Initial Setter */
void {{SM}}_ClassInit(void);

/* Report Function accessors */
void {{SM}}_SetReportFunc({{SM}} smi, void (*reportFunc)({{SM}} smi, const char *fmt, ...));
void (*{{SM}}_GetReportFunc({{SM}} smi))({{SM}} smi, const char *fmt, ...);

/* Private data accessors */
void {{SM}}_SetPrivate({{SM}} smi, void *data, void (*pKiller)(void *));
void *{{SM}}_GetPrivate({{SM}} smi);
const char *{{SM}}_GetName({{SM}} smi);

#endif /* {{SM}}_FSM_H */

/*
 * vim{# spoiler #}: ft=c ts=8 sts=4 sw=4 et cindent
 */
 {# vim: ft=jinja ts=8 sts=4 sw=4 et smartindent nocindent
 #}
